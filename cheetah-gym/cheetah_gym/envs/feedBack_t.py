"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class CheaterState(object):
    __slots__ = ["orientation", "position", "omegaBody", "vBody", "acceleration"]

    __typenames__ = ["float", "float", "float", "float", "float"]

    __dimensions__ = [[4], [3], [3], [3], [3]]

    def __init__(self):
        self.orientation = [ 0.0 for dim0 in range(4) ]
        self.position = [ 0.0 for dim0 in range(3) ]
        self.omegaBody = [ 0.0 for dim0 in range(3) ]
        self.vBody = [ 0.0 for dim0 in range(3) ]
        self.acceleration = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(CheaterState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.orientation[:4]))
        buf.write(struct.pack('>3f', *self.position[:3]))
        buf.write(struct.pack('>3f', *self.omegaBody[:3]))
        buf.write(struct.pack('>3f', *self.vBody[:3]))
        buf.write(struct.pack('>3f', *self.acceleration[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != CheaterState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return CheaterState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = CheaterState()
        self.orientation = struct.unpack('>4f', buf.read(16))
        self.position = struct.unpack('>3f', buf.read(12))
        self.omegaBody = struct.unpack('>3f', buf.read(12))
        self.vBody = struct.unpack('>3f', buf.read(12))
        self.acceleration = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if CheaterState in parents: return 0
        tmphash = (0x23f25dabb674d8d5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if CheaterState._packed_fingerprint is None:
            CheaterState._packed_fingerprint = struct.pack(">Q", CheaterState._get_hash_recursive([]))
        return CheaterState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

class vectornav_lcmt(object):
    __slots__ = ["q", "w", "a"]

    __typenames__ = ["float", "float", "float"]

    __dimensions__ = [[4], [3], [3]]

    def __init__(self):
        self.q = [ 0.0 for dim0 in range(4) ]
        self.w = [ 0.0 for dim0 in range(3) ]
        self.a = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(vectornav_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.q[:4]))
        buf.write(struct.pack('>3f', *self.w[:3]))
        buf.write(struct.pack('>3f', *self.a[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vectornav_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vectornav_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vectornav_lcmt()
        self.q = struct.unpack('>4f', buf.read(16))
        self.w = struct.unpack('>3f', buf.read(12))
        self.a = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if vectornav_lcmt in parents: return 0
        tmphash = (0xf57906decbf7ebdc) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vectornav_lcmt._packed_fingerprint is None:
            vectornav_lcmt._packed_fingerprint = struct.pack(">Q", vectornav_lcmt._get_hash_recursive([]))
        return vectornav_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


class spi_data_t(object):
    __slots__ = ["q_abad", "q_hip", "q_knee", "qd_abad", "qd_hip", "qd_knee", "flags", "spi_driver_status"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "int32_t", "int32_t"]

    __dimensions__ = [[4], [4], [4], [4], [4], [4], [4], None]

    def __init__(self):
        self.q_abad = [ 0.0 for dim0 in range(4) ]
        self.q_hip = [ 0.0 for dim0 in range(4) ]
        self.q_knee = [ 0.0 for dim0 in range(4) ]
        self.qd_abad = [ 0.0 for dim0 in range(4) ]
        self.qd_hip = [ 0.0 for dim0 in range(4) ]
        self.qd_knee = [ 0.0 for dim0 in range(4) ]
        self.flags = [ 0 for dim0 in range(4) ]
        self.spi_driver_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(spi_data_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.q_abad[:4]))
        buf.write(struct.pack('>4f', *self.q_hip[:4]))
        buf.write(struct.pack('>4f', *self.q_knee[:4]))
        buf.write(struct.pack('>4f', *self.qd_abad[:4]))
        buf.write(struct.pack('>4f', *self.qd_hip[:4]))
        buf.write(struct.pack('>4f', *self.qd_knee[:4]))
        buf.write(struct.pack('>4i', *self.flags[:4]))
        buf.write(struct.pack(">i", self.spi_driver_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != spi_data_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return spi_data_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = spi_data_t()
        self.q_abad = struct.unpack('>4f', buf.read(16))
        self.q_hip = struct.unpack('>4f', buf.read(16))
        self.q_knee = struct.unpack('>4f', buf.read(16))
        self.qd_abad = struct.unpack('>4f', buf.read(16))
        self.qd_hip = struct.unpack('>4f', buf.read(16))
        self.qd_knee = struct.unpack('>4f', buf.read(16))
        self.flags = struct.unpack('>4i', buf.read(16))
        self.spi_driver_status = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if spi_data_t in parents: return 0
        tmphash = (0x9d2fa835a926bf27) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if spi_data_t._packed_fingerprint is None:
            spi_data_t._packed_fingerprint = struct.pack(">Q", spi_data_t._get_hash_recursive([]))
        return spi_data_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

class feedBack_t(object):
    __slots__ = ["isFirst", "isCheater", "trueInfo", "spiData", "navInfo"]

    __typenames__ = ["boolean", "boolean", "CheaterState", "spi_data_t", "vectornav_lcmt"]

    __dimensions__ = [None, None, None, None, None]

    def __init__(self):
        self.isFirst = False
        self.isCheater = False
        self.trueInfo = CheaterState()
        self.spiData = spi_data_t()
        self.navInfo = vectornav_lcmt()

    def encode(self):
        buf = BytesIO()
        buf.write(feedBack_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.isFirst, self.isCheater))
        assert self.trueInfo._get_packed_fingerprint() == CheaterState._get_packed_fingerprint()
        self.trueInfo._encode_one(buf)
        assert self.spiData._get_packed_fingerprint() == spi_data_t._get_packed_fingerprint()
        self.spiData._encode_one(buf)
        assert self.navInfo._get_packed_fingerprint() == vectornav_lcmt._get_packed_fingerprint()
        self.navInfo._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != feedBack_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return feedBack_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = feedBack_t()
        self.isFirst = bool(struct.unpack('b', buf.read(1))[0])
        self.isCheater = bool(struct.unpack('b', buf.read(1))[0])
        self.trueInfo = CheaterState._decode_one(buf)
        self.spiData = spi_data_t._decode_one(buf)
        self.navInfo = vectornav_lcmt._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if feedBack_t in parents: return 0
        newparents = parents + [feedBack_t]
        tmphash = (0x2f7fd2ab6240d0c2+ CheaterState._get_hash_recursive(newparents)+ spi_data_t._get_hash_recursive(newparents)+ vectornav_lcmt._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if feedBack_t._packed_fingerprint is None:
            feedBack_t._packed_fingerprint = struct.pack(">Q", feedBack_t._get_hash_recursive([]))
        return feedBack_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

